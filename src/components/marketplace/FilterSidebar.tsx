// This is an autogenerated file from Firebase Studio.
"use client";

import { useState, useEffect } from "react";
import { usePathname, useRouter, useSearchParams } from "next/navigation";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import { Slider } from "@/components/ui/slider";
import { Button } from "@/components/ui/button";
import { useLanguage } from "@/hooks/use-language";
import { ScrollArea } from "../ui/scroll-area";
import { formatPrice } from "@/lib/utils";

const allCategories = ["Pottery", "Jewelry", "Textiles", "Woodwork"];
const regions = [
    "Andhra Pradesh", "Arunachal Pradesh", "Assam", "Bihar", "Chhattisgarh", 
    "Goa", "Gujarat", "Haryana", "Himachal Pradesh", "Jharkhand", "Karnataka", 
    "Kerala", "Madhya Pradesh", "Maharashtra", "Manipur", "Meghalaya", "Mizoram", 
    "Nagaland", "Odisha", "Punjab", "Rajasthan", "Sikkim", "Tamil Nadu", 
    "Telangana", "Tripura", "Uttar Pradesh", "Uttarakhand", "West Bengal"
];

const allMaterials = {
  "Pottery": ["Terracotta clay", "Stoneware clay", "Porcelain clay", "Earthenware clay"],
  "Textiles": ["Cotton", "Silk", "Wool", "Linen", "Jute", "Hemp"],
  "Jewelry": ["Gold", "Silver", "Brass", "Copper", "Mixed alloys"],
  "Woodwork": ["Teak", "Rosewood", "Sheesham", "Sandalwood", "Mango wood", "Bamboo", "Neem wood"],
};

const allProductTypes = {
    "Pottery": ["Vase", "Mug", "Bowl", "Plate", "Wall Hanging", "Pot"],
    "Jewelry": ["Necklace", "Ring", "Earrings", "Bracelet", "Sculpture"],
    "Textiles": ["Scarf", "Wall Hanging", "Shawl", "Saree", "Kurta"],
    "Woodwork": ["Bowl", "Cutting Board", "Sculpture", "Furniture", "Basket", "Pen Stand"],
};

const defaultMaterials = ["Clay", "Silver", "Wood", "Cotton", "Wool", "Ceramic"];
const defaultProductTypes = ["Vase", "Necklace", "Scarf", "Bowl", "Ring"];


export function FilterSidebar() {
  const router = useRouter();
  const pathname = usePathname();
  const searchParams = useSearchParams();
  const { translate } = useLanguage();

  const getArrayFromParams = (key: string): string[] => {
    const param = searchParams.get(key);
    return param ? param.split(",") : [];
  };

  const [selectedCategories, setSelectedCategories] = useState<string[]>(() => getArrayFromParams("category"));
  const [selectedProductTypes, setSelectedProductTypes] = useState<string[]>(() => getArrayFromParams("productType"));
  const [selectedRegions, setSelectedRegions] = useState<string[]>(() => getArrayFromParams("region"));
  const [selectedMaterials, setSelectedMaterials] = useState<string[]>(() => getArrayFromParams("material"));
  const [priceRange, setPriceRange] = useState<number[]>(() => {
    const price = searchParams.get("price");
    return price ? price.split(",").map(Number) : [0, 50000];
  });
  
  useEffect(() => {
    setSelectedCategories(getArrayFromParams("category"));
    setSelectedProductTypes(getArrayFromParams("productType"));
    setSelectedRegions(getArrayFromParams("region"));
    setSelectedMaterials(getArrayFromParams("material"));
    const price = searchParams.get("price");
    setPriceRange(price ? price.split(",").map(Number) : [0, 50000]);
  }, [searchParams]);

  const handleFilterChange = (filterType: string, value: string, checked: boolean) => {
    const setterMap = {
      category: setSelectedCategories,
      productType: setSelectedProductTypes,
      region: setSelectedRegions,
      material: setSelectedMaterials,
    };
    
    const setter = setterMap[filterType as keyof typeof setterMap];
    
    setter((prev: string[]) => {
        const newValues = checked ? [...prev, value] : prev.filter(item => item !== value);
        return newValues;
    });
  };

  const displayedMaterials = () => {
    if (selectedCategories.length === 0) return defaultMaterials;
    const materialsToShow = new Set<string>();
    selectedCategories.forEach(category => {
      (allMaterials[category as keyof typeof allMaterials] || []).forEach(material => materialsToShow.add(material));
    });
    return Array.from(materialsToShow);
  };

  const displayedProductTypes = () => {
    if (selectedCategories.length === 0) return defaultProductTypes;
    const typesToShow = new Set<string>();
    selectedCategories.forEach(category => {
      (allProductTypes[category as keyof typeof allProductTypes] || []).forEach(type => typesToShow.add(type));
    });
    return Array.from(typesToShow);
  };

  const applyFilters = () => {
    const params = new URLSearchParams();
    
    if (selectedProductTypes.length) params.set("productType", selectedProductTypes.join(","));
    if (selectedRegions.length) params.set("region", selectedRegions.join(","));
    if (selectedMaterials.length) params.set("material", selectedMaterials.join(","));
    if (priceRange[0] !== 0 || priceRange[1] !== 50000) {
      params.set("price", priceRange.join(","));
    }

    let targetPath = '/categories/all';
    if (selectedCategories.length === 1) {
        targetPath = `/categories/${selectedCategories[0].toLowerCase()}`;
    }

    const queryString = params.toString();
    router.push(`${targetPath}${queryString ? `?${queryString}` : ''}#products`);
  };
  
  const handleSelectAllProductTypes = (checked: boolean) => {
    setSelectedProductTypes(checked ? displayedProductTypes() : []);
  }
  const allProductTypesSelected = displayedProductTypes().length > 0 && selectedProductTypes.length === displayedProductTypes().length;

  const handleSelectAllMaterials = (checked: boolean) => {
    setSelectedMaterials(checked ? displayedMaterials() : []);
  }
  const allMaterialsSelected = displayedMaterials().length > 0 && selectedMaterials.length === displayedMaterials().length;

  const handleSelectAllRegions = (checked: boolean) => {
    setSelectedRegions(checked ? regions : []);
  }
  const allRegionsSelected = regions.length > 0 && selectedRegions.length === regions.length;


  const renderCheckboxGroup = (title: string, items: string[], selectedItems: string[], filterType: string) => {
    let handleSelectAll: (checked: boolean) => void;
    let allSelected: boolean;

    if (filterType === 'productType') {
      handleSelectAll = handleSelectAllProductTypes;
      allSelected = allProductTypesSelected;
    } else if (filterType === 'material') {
      handleSelectAll = handleSelectAllMaterials;
      allSelected = allMaterialsSelected;
    } else if (filterType === 'region') {
      handleSelectAll = handleSelectAllRegions;
      allSelected = allRegionsSelected;
    }

    return (
      <AccordionItem value={filterType}>
        <AccordionTrigger className="text-base font-medium capitalize">{translate(title)}</AccordionTrigger>
        <AccordionContent>
          <div className="space-y-2 pt-2 max-h-60 overflow-y-auto">
            {(filterType === 'productType' || filterType === 'material' || filterType === 'region') && items.length > 0 && (
               <div className="flex items-center space-x-2">
                  <Checkbox
                      id={`${filterType}-select-all`}
                      checked={allSelected}
                      onCheckedChange={(checked) => handleSelectAll(!!checked)}
                  />
                  <Label htmlFor={`${filterType}-select-all`} className="font-semibold">{translate('Select All')}</Label>
              </div>
            )}
            {items.map((item) => (
              <div key={item} className="flex items-center space-x-2">
                <Checkbox
                  id={`${filterType}-${item}`}
                  checked={selectedItems.includes(item)}
                  onCheckedChange={(checked) => handleFilterChange(filterType, item, !!checked)}
                />
                <Label htmlFor={`${filterType}-${item}`} className="font-normal">{translate(item)}</Label>
              </div>
            ))}
          </div>
        </AccordionContent>
      </AccordionItem>
    );
  }

  return (
    <aside className="w-full lg:w-64 flex flex-col h-full">
      <h2 className="mb-4 font-headline text-xl font-semibold hidden lg:block">{translate('Filters')}</h2>
      <div className="flex-grow lg:flex-grow-0 overflow-hidden flex flex-col">
        <ScrollArea className="flex-grow pr-4 -mr-4">
            <Accordion type="multiple" defaultValue={["category", "price", "productType"]} className="w-full">
            {renderCheckboxGroup("Category", allCategories, selectedCategories, "category")}
            {renderCheckboxGroup("Product Type", displayedProductTypes(), selectedProductTypes, "productType")}
            
            <AccordionItem value="price">
                <AccordionTrigger className="text-base font-medium">{translate('Price Range')}</AccordionTrigger>
                <AccordionContent>
                <div className="pt-4">
                    <Slider
                    value={priceRange}
                    onValueChange={setPriceRange}
                    max={50000}
                    step={500}
                    />
                    <div className="mt-2 flex justify-between text-sm text-muted-foreground">
                    <span>{formatPrice(priceRange[0])}</span>
                    <span>{formatPrice(priceRange[1])}</span>
                    </div>
                </div>
                </AccordionContent>
            </AccordionItem>

            {renderCheckboxGroup("Region", regions, selectedRegions, "region")}
            {renderCheckboxGroup("Material", displayedMaterials(), selectedMaterials, "material")}
            </Accordion>
        </ScrollArea>
        <div className="mt-6">
            <Button className="w-full" onClick={applyFilters}>{translate('Apply Filters')}</Button>
        </div>
      </div>
    </aside>
  );
}
