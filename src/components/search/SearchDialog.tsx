// This is an autogenerated file from Firebase Studio.
"use client";

import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Search, Mic, Camera, Video, Upload, CircleDot } from "lucide-react";
import { Input } from "../ui/input";
import { useState, useRef, useEffect } from "react";
import { useToast } from "@/hooks/use-toast";
import { Alert, AlertDescription, AlertTitle } from "../ui/alert";
import Image from "next/image";
import { useLanguage } from "@/hooks/use-language";

export function SearchDialog() {
  const [open, setOpen] = useState(false);
  const [searchQuery, setSearchQuery] = useState("");
  const [searchMode, setSearchMode] = useState<"text" | "voice" | "image">("text");
  const [isRecording, setIsRecording] = useState(false);
  const [hasCameraPermission, setHasCameraPermission] = useState<boolean | null>(null);
  const [capturedImage, setCapturedImage] = useState<string | null>(null);

  const { toast } = useToast();
  const { translate, language } = useLanguage();
  const videoRef = useRef<HTMLVideoElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);

  useEffect(() => {
    // Clean up streams when the dialog is closed
    return () => {
      if (videoRef.current && videoRef.current.srcObject) {
        (videoRef.current.srcObject as MediaStream).getTracks().forEach(track => track.stop());
      }
    };
  }, []);

  const handleTextSearch = (e: React.FormEvent) => {
    e.preventDefault();
    if (!searchQuery) return;
    // TODO: Implement actual search logic
    console.log("Searching for:", searchQuery);
    toast({
      title: translate("Search Submitted"),
      description: `${translate('You searched for:')} ${searchQuery}`,
    });
    setOpen(false);
  };

  const handleVoiceSearch = () => {
    if (!('SpeechRecognition' in window || 'webkitSpeechRecognition' in window)) {
        toast({ variant: "destructive", title: translate("Voice search not supported in this browser.")});
        return;
    }

    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    const recognition = new SpeechRecognition();
    recognition.continuous = false;
    recognition.lang = language;
    recognition.interimResults = false;
    recognition.maxAlternatives = 1;

    recognition.onstart = () => {
        setIsRecording(true);
        toast({ title: translate("Listening...") });
    };

    recognition.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        setSearchQuery(transcript);
        // Automatically submit the search after transcription
        toast({
          title: translate("Search Submitted"),
          description: `${translate('You searched for:')} ${transcript}`,
        });
        setOpen(false);
    };

    recognition.onerror = (event) => {
        let description = translate("An unknown error occurred during voice search.");
        if (event.error === 'network') {
            description = translate("Voice search failed due to a network issue. Please check your connection and try again.");
        } else if (event.error === 'not-allowed' || event.error === 'service-not-allowed') {
            description = translate("Microphone access was denied. Please enable it in your browser settings to use voice search.");
        }
        toast({ variant: "destructive", title: translate("Voice Search Error"), description: description });
    };
    
    recognition.onend = () => {
        setIsRecording(false);
    };

    recognition.start();
  };

  const handleImageSearchClick = async () => {
    setSearchMode("image");
    setCapturedImage(null);
    setHasCameraPermission(null); // Reset permission state
    try {
        const stream = await navigator.mediaDevices.getUserMedia({ video: true });
        setHasCameraPermission(true);
        if (videoRef.current) {
            videoRef.current.srcObject = stream;
        }
    } catch (error) {
        setHasCameraPermission(false);
        toast({
            variant: "destructive",
            title: translate("Camera Access Denied"),
            description: translate("Please enable camera permissions in your browser settings to use image search."),
        });
    }
  };

  const handleCaptureImage = () => {
      if (videoRef.current && canvasRef.current) {
          const video = videoRef.current;
          const canvas = canvasRef.current;
          canvas.width = video.videoWidth;
          canvas.height = video.videoHeight;
          const context = canvas.getContext('2d');
          context?.drawImage(video, 0, 0, video.videoWidth, video.videoHeight);
          const dataUrl = canvas.toDataURL('image/png');
          setCapturedImage(dataUrl);

          // Stop video stream after capture
          if (video.srcObject) {
            (video.srcObject as MediaStream).getTracks().forEach(track => track.stop());
          }
      }
  }
  
  const resetToTextSearch = () => {
    setSearchMode('text');
    setCapturedImage(null);
    if (videoRef.current && videoRef.current.srcObject) {
        (videoRef.current.srcObject as MediaStream).getTracks().forEach(track => track.stop());
    }
  }

  return (
    <Dialog open={open} onOpenChange={(isOpen) => {
      setOpen(isOpen);
      if (!isOpen) {
        resetToTextSearch();
      }
    }}>
      <DialogTrigger asChild>
        <Button variant="ghost" size="icon">
          <Search className="h-5 w-5" />
          <span className="sr-only">{translate('Open search')}</span>
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[600px]">
        <DialogHeader>
          <DialogTitle className="font-headline text-2xl">{translate('Search for Crafts')}</DialogTitle>
        </DialogHeader>

        {searchMode === 'text' && (
             <form onSubmit={handleTextSearch} className="mt-4 flex items-center gap-2">
                <div className="relative flex-grow">
                    <Input
                    type="search"
                    placeholder={translate("Search by product, artisan, or style...")}
                    className="pl-10"
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    />
                    <div className="absolute inset-y-0 left-0 flex items-center pl-3">
                    <Search className="h-5 w-5 text-muted-foreground" />
                    </div>
                </div>
                <Button type="button" variant="ghost" size="icon" aria-label={translate("Search by voice")} onClick={handleVoiceSearch} disabled={isRecording}>
                    <Mic className="h-5 w-5" />
                </Button>
                <Button type="button" variant="ghost" size="icon" aria-label={translate("Search by image")} onClick={handleImageSearchClick}>
                    <Camera className="h-5 w-5" />
                </Button>
            </form>
        )}

        {searchMode === 'image' && (
            <div className="mt-4">
                {hasCameraPermission === false && (
                     <Alert variant="destructive">
                        <Video className="h-4 w-4" />
                        <AlertTitle>{translate('Camera Access Required')}</AlertTitle>
                        <AlertDescription>
                            {translate('Please allow camera access in your browser to use image search. You may need to refresh the page after granting permission.')}
                        </AlertDescription>
                    </Alert>
                )}
                
                {hasCameraPermission === true && (
                    <div className="space-y-4">
                        {capturedImage ? (
                             <div className="space-y-4">
                                <div className="relative aspect-video w-full overflow-hidden rounded-md border">
                                    <Image src={capturedImage} alt="Captured image for search" layout="fill" objectFit="contain"/>
                                </div>
                                <div className="flex justify-center gap-4">
                                     <Button onClick={() => { toast({ title: translate("Image search not yet implemented.")}) }}>{translate('Search with this image')}</Button>
                                    <Button variant="outline" onClick={() => setCapturedImage(null)}>{translate('Retake')}</Button>
                                </div>
                            </div>
                        ) : (
                            <>
                                <video ref={videoRef} className="w-full aspect-video rounded-md bg-muted" autoPlay playsInline muted />
                                <div className="flex justify-center">
                                    <Button onClick={handleCaptureImage} size="lg" className="rounded-full h-16 w-16 p-0">
                                        <CircleDot className="h-8 w-8" />
                                        <span className="sr-only">{translate('Capture Image')}</span>
                                    </Button>
                                </div>
                            </>
                        )}
                    </div>
                )}
                 <Button variant="link" onClick={resetToTextSearch} className="mt-4 mx-auto block">
                    {translate('Back to text search')}
                 </Button>
            </div>
        )}
        <canvas ref={canvasRef} className="hidden"></canvas>
      </DialogContent>
    </Dialog>
  );
}