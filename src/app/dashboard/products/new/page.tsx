// This is an autogenerated file from Firebase Studio.
"use client";

import { useState, useEffect } from "react";
import { useForm, FormProvider } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { generateProductDescription } from "@/ai/flows/product-description-generation";
import { useToast } from "@/hooks/use-toast";
import { Loader, Sparkles } from "lucide-react";
import { useLanguage } from "@/hooks/use-language";
import { useAuth } from "@/hooks/use-auth";
import { useRouter } from "next/navigation";

const productSchema = z.object({
  productName: z.string().min(3, "Product name must be at least 3 characters."),
  productCategory: z.string().min(1, "Please select a category."),
  productMaterials: z.string().min(3, "Materials must be at least 3 characters."),
  productFeatures: z.string().min(10, "Features must be at least 10 characters."),
  style: z.string().min(3, "Style must be at least 3 characters."),
  targetAudience: z.string().min(3, "Target audience must be at least 3 characters."),
  description: z.string().optional(),
});

export default function NewProductPage() {
  const { toast } = useToast();
  const { translate } = useLanguage();
  const [isGenerating, setIsGenerating] = useState(false);
  const { user, isLoggedIn } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (!isLoggedIn || user?.role !== 'artisan') {
      router.push('/login');
    }
  }, [isLoggedIn, user, router]);

  const form = useForm<z.infer<typeof productSchema>>({
    resolver: zodResolver(productSchema),
    defaultValues: {
        productName: "",
        productCategory: "",
        productMaterials: "",
        productFeatures: "",
        style: "",
        targetAudience: "",
        description: "",
    },
  });

  const handleGenerateDescription = async () => {
    const values = form.getValues();
    const { productName, productCategory, productMaterials, productFeatures, style, targetAudience } = values;

    if (!productName || !productCategory || !productMaterials || !productFeatures || !style || !targetAudience) {
      toast({
        variant: "destructive",
        title: "Missing Information",
        description: "Please fill out all product details before generating a description.",
      });
      return;
    }

    setIsGenerating(true);
    try {
      const result = await generateProductDescription(values);
      form.setValue("description", result.description);
      toast({
        title: "Description Generated!",
        description: "The AI-powered description has been added to the form.",
      });
    } catch (error) {
      console.error("Failed to generate description:", error);
      toast({
        variant: "destructive",
        title: "Generation Failed",
        description: "Could not generate a description at this time.",
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const onSubmit = (values: z.infer<typeof productSchema>) => {
    console.log("Form Submitted:", values);
    toast({
      title: "Product Submitted!",
      description: "Your new product has been saved (simulation).",
    });
  };

  if (!isLoggedIn || user?.role !== 'artisan') {
    return null;
  }

  return (
    <div className="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-8">
      <header>
        <h1 className="font-semibold text-lg md:text-2xl">{translate('Add a New Product')}</h1>
        <p className="text-muted-foreground">{translate("Fill in the details below to add a new product to your store.")}</p>
      </header>
      
      <FormProvider {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
          <Card>
            <CardHeader>
              <CardTitle>{translate('Product Details')}</CardTitle>
              <CardDescription>{translate("Provide the essential information about your craft.")}</CardDescription>
            </CardHeader>
            <CardContent className="grid gap-6 md:grid-cols-2">
              <FormField
                control={form.control}
                name="productName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>{translate('Product Name')}</FormLabel>
                    <FormControl>
                      <Input placeholder={translate("e.g. Hand-painted Ceramic Mug")} {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="productCategory"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>{translate('Category')}</FormLabel>
                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder={translate("Select a category")} />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="Pottery">{translate('Pottery')}</SelectItem>
                        <SelectItem value="Jewelry">{translate('Jewelry')}</SelectItem>
                        <SelectItem value="Textiles">{translate('Textiles')}</SelectItem>
                        <SelectItem value="Woodwork">{translate('Woodwork')}</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="productMaterials"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>{translate('Materials')}</FormLabel>
                    <FormControl>
                      <Input placeholder={translate("e.g. Stoneware clay, non-toxic glaze")} {...field} />
                    </FormControl>
                     <FormDescription>{translate("Comma-separated list of materials.")}</FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
               <FormField
                control={form.control}
                name="productFeatures"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>{translate('Features')}</FormLabel>
                    <FormControl>
                      <Input placeholder={translate("e.g. Microwave safe, holds 12oz, unique pattern")} {...field} />
                    </FormControl>
                     <FormDescription>{translate("Key features of the product.")}</FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
               <FormField
                control={form.control}
                name="style"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>{translate('Style')}</FormLabel>
                    <FormControl>
                      <Input placeholder={translate("e.g. Rustic, Minimalist, Modern")} {...field} />
                    </FormControl>
                     <FormDescription>{translate("The aesthetic style of your product.")}</FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="targetAudience"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>{translate('Target Audience')}</FormLabel>
                    <FormControl>
                      <Input placeholder={translate("e.g. Coffee lovers, art collectors, gift seekers")} {...field} />
                    </FormControl>
                    <FormDescription>{translate("Who is this product for?")}</FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
                <div className="flex items-center justify-between">
                    <div>
                        <CardTitle>{translate('AI-Generated Description')}</CardTitle>
                        <CardDescription>{translate("Let AI help you write a compelling description.")}</CardDescription>
                    </div>
                    <Button type="button" onClick={handleGenerateDescription} disabled={isGenerating}>
                        {isGenerating ? <Loader className="mr-2 h-4 w-4 animate-spin" /> : <Sparkles className="mr-2 h-4 w-4" />}
                        {translate('Generate')}
                    </Button>
                </div>
            </CardHeader>
            <CardContent>
                 <FormField
                    control={form.control}
                    name="description"
                    render={({ field }) => (
                    <FormItem>
                        <FormLabel>{translate('Product Description')}</FormLabel>
                        <FormControl>
                            <Textarea
                                placeholder={translate("Click 'Generate' or write your own description here.")}
                                className="min-h-[120px]"
                                {...field}
                            />
                        </FormControl>
                        <FormMessage />
                    </FormItem>
                    )}
                />
            </CardContent>
          </Card>

          <div className="flex justify-end">
            <Button type="submit" size="lg">{translate('Save Product')}</Button>
          </div>
        </form>
      </FormProvider>
    </div>
  );
}
