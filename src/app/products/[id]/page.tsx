// This is an autogenerated file from Firebase Studio.
'use client';
import { notFound, useRouter, useSearchParams } from "next/navigation";
import Image from "next/image";
import Link from "next/link";
import { getProduct, getArtisan, getReviewsForProduct } from "@/lib/data";
import { PlaceHolderImages } from "@/lib/placeholder-images";
import { Button } from "@/components/ui/button";
import { Heart, Star, ShoppingCart, Info, HardHat, MessageSquare } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Recommendations } from "@/components/product/Recommendations";
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from "@/components/ui/carousel";
import { AddToCartButton } from "./_components/AddToCartButton";
import { CraftStory } from "@/components/product/CraftStory";
import { AINarration } from "@/components/product/AINarration";
import { useLanguage } from "@/hooks/use-language";
import { useWishlist } from "@/hooks/use-wishlist";
import { useAuth } from "@/hooks/use-auth";
import { cn, formatPrice } from "@/lib/utils";
import React from "react";

export default function ProductDetailPage({ params }: { params: { id: string } }) {
  const { translate } = useLanguage();
  const product = getProduct(params.id);
  const { isInWishlist, addToWishlist, removeFromWishlist } = useWishlist();
  const { isLoggedIn } = useAuth();
  const router = useRouter();

  if (!product) {
    notFound();
  }

  const artisan = getArtisan(product.artisanId);
  const reviews = getReviewsForProduct(product.id);
  const artisanImage = artisan ? PlaceHolderImages.find(img => img.id === artisan.profileImage) : null;
  const productImages = product.images.map(id => PlaceHolderImages.find(img => img.id === id)).filter(Boolean);

  const averageRating = reviews.length > 0 ? reviews.reduce((acc, r) => acc + r.rating, 0) / reviews.length : 0;
  const inWishlist = isInWishlist(product.id);

  const handleWishlistClick = () => {
    if (!isLoggedIn) {
       router.push(`/login?redirect=/wishlist&addItem=${product.id}`);
      return;
    }
    if (inWishlist) {
      removeFromWishlist(product.id);
    } else {
      addToWishlist(product);
    }
  };

  return (
    <div className="container mx-auto px-4 py-8 md:px-6">
      <div className="grid gap-8 md:grid-cols-2 lg:gap-12">
        <div>
          <Carousel className="w-full">
            <CarouselContent>
              {productImages.map((image, index) => (
                image && <CarouselItem key={index}>
                  <Card className="overflow-hidden">
                    <CardContent className="p-0 aspect-square">
                      <Image
                        src={image.imageUrl}
                        alt={`${product.name} - view ${index + 1}`}
                        width={800}
                        height={800}
                        className="h-full w-full object-cover"
                        data-ai-hint={image.imageHint}
                      />
                    </CardContent>
                  </Card>
                </CarouselItem>
              ))}
            </CarouselContent>
            <CarouselPrevious className="left-4"/>
            <CarouselNext className="right-4"/>
          </Carousel>
        </div>

        <div className="flex flex-col gap-6">
          <div>
            <Badge variant="secondary">{translate(product.category)}</Badge>
            <h1 className="mt-2 font-headline text-3xl font-bold lg:text-4xl">
              {translate(product.name)}
            </h1>
            {artisan && (
              <p className="mt-1 text-lg text-muted-foreground">
                {translate('by')}{" "}
                <Link href={`/artisans/${artisan.id}`} className="hover:underline text-primary">
                  {artisan.name}
                </Link>
              </p>
            )}
          </div>
          
          <div className="flex items-center gap-2">
            <div className="flex items-center">
              {[...Array(5)].map((_, i) => (
                <Star key={i} className={`h-5 w-5 ${i < Math.round(averageRating) ? 'text-yellow-400 fill-yellow-400' : 'text-gray-300'}`} />
              ))}
            </div>
            <span className="text-muted-foreground">{averageRating.toFixed(1)} ({reviews.length} {translate('reviews')})</span>
          </div>

          <p className="text-4xl font-bold">{formatPrice(product.price)}</p>

          {artisan && <CraftStory product={product} artisan={artisan} />}

          <div className="flex flex-col gap-2 sm:flex-row">
            <AddToCartButton product={product} />
            <Button variant="outline" size="lg" onClick={handleWishlistClick}>
              <Heart className={cn("mr-2 h-5 w-5", inWishlist && "fill-red-500 text-red-500")} /> {translate('Wishlist')}
            </Button>
            <Button variant="outline" size="lg">
              <ShoppingCart className="mr-2 h-5 w-5" /> {translate('AR Try-On')}
            </Button>
          </div>

          {artisan && (
            <Card>
              <CardHeader className="flex flex-row items-center gap-4">
                {artisanImage && <Avatar className="h-14 w-14">
                  <AvatarImage src={artisanImage.imageUrl} alt={artisan.name} />
                  <AvatarFallback>{artisan.name.charAt(0)}</AvatarFallback>
                </Avatar>}
                <div>
                  <CardTitle className="font-headline text-xl">{artisan.name}</CardTitle>
                  <p className="text-sm text-muted-foreground">{artisan.location}</p>
                </div>
                 <Button asChild variant="secondary" className="ml-auto">
                    <Link href={`/artisans/${artisan.id}`}>{translate('View Profile')}</Link>
                </Button>
              </CardHeader>
            </Card>
          )}

        </div>
      </div>
      
      <div className="mt-12">
         <Tabs defaultValue="description" className="w-full">
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="description"><Info className="mr-2 h-4 w-4"/>{translate('Description')}</TabsTrigger>
              <TabsTrigger value="making-process"><HardHat className="mr-2 h-4 w-4"/>{translate('Making Process')}</TabsTrigger>
              <TabsTrigger value="reviews"><MessageSquare className="mr-2 h-4 w-4"/>{translate('Reviews')} ({reviews.length})</TabsTrigger>
            </TabsList>
            <TabsContent value="description" className="mt-6">
              <div className="prose max-w-none dark:prose-invert">
                <AINarration product={product} />
                <p>{translate(product.description)}</p>
              </div>
            </TabsContent>
            <TabsContent value="making-process" className="prose max-w-none dark:prose-invert mt-6">
              <p>{translate(product.makingProcess)}</p>
            </TabsContent>
            <TabsContent value="reviews" className="mt-6">
                <div className="space-y-6">
                    {reviews.length > 0 ? reviews.map(review => (
                        <Card key={review.id}>
                            <CardHeader>
                                <div className="flex items-center justify-between">
                                    <p className="font-semibold">{review.reviewer}</p>
                                    <div className="flex items-center">
                                      {[...Array(5)].map((_, i) => (
                                        <Star key={i} className={`h-4 w-4 ${i < review.rating ? 'text-yellow-400 fill-yellow-400' : 'text-gray-300'}`} />
                                      ))}
                                    </div>
                                </div>
                            </CardHeader>
                            <CardContent>
                                <p className="text-muted-foreground">{translate(review.comment)}</p>
                            </CardContent>
                        </Card>
                    )) : <p>{translate('No reviews yet.')}</p>}
                </div>
            </TabsContent>
          </Tabs>
      </div>
      
      <div className="mt-16">
        <Recommendations currentProductId={product.id} />
      </div>
    </div>
  );
}
