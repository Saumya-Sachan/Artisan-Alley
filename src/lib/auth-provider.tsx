
// This is an autogenerated file from Firebase Studio.
"use client";

import React, { createContext, useState, useEffect, useCallback } from "react";
import { useToast } from "@/hooks/use-toast";
import { auth } from "./firebase";
import { GoogleAuthProvider, signInWithPopup, signOut, onAuthStateChanged, User as FirebaseUser } from "firebase/auth";

interface User {
    name: string;
    email: string;
    avatar: string;
    role: 'customer' | 'artisan';
}

interface AuthContextType {
  isLoggedIn: boolean;
  user: User | null;
  login: (user: User) => void;
  logout: () => void;
  setRole: (role: 'customer' | 'artisan') => void;
  signInWithGoogle: (role: 'customer' | 'artisan') => Promise<User | null>;
}

export const AuthContext = createContext<AuthContextType | undefined>(
  undefined
);

const defaultUser: User = {
    name: "Alex Doe",
    email: "alex.doe@example.com",
    avatar: "https://picsum.photos/seed/alex/200/200",
    role: 'customer',
};

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [isClient, setIsClient] = useState(false);
  const { toast } = useToast();

  useEffect(() => {
    setIsClient(true);
    try {
      const localUser = localStorage.getItem("user");
      if (localUser) {
        setUser(JSON.parse(localUser));
      }
    } catch (error) {
      console.error("Failed to process user from localStorage", error);
    }
  }, []);

  useEffect(() => {
    if (isClient) {
      try {
        if (user) {
          localStorage.setItem("user", JSON.stringify(user));
        } else {
          localStorage.removeItem("user");
        }
      } catch (error) {
        console.error("Failed to save user to localStorage", error);
      }
    }
  }, [user, isClient]);
  

  const login = useCallback((userData: User) => {
    setUser(userData);
    localStorage.setItem("user", JSON.stringify(userData));
  }, []);

  const logout = useCallback(async () => {
    setUser(null);
    localStorage.removeItem('user');
  }, []);
  
  const signInWithGoogle = async (role: 'customer' | 'artisan'): Promise<User | null> => {
    const provider = new GoogleAuthProvider();
    try {
        const result = await signInWithPopup(auth, provider);
        const firebaseUser = result.user;
        const newUser: User = {
            name: firebaseUser.displayName || "Anonymous",
            email: firebaseUser.email || "no-email@example.com",
            avatar: firebaseUser.photoURL || `https://picsum.photos/seed/${firebaseUser.uid}/200/200`,
            role: role,
        };
        login(newUser);
        return newUser;
    } catch (error) {
        console.error("Google Sign-In Error:", error);
        toast({
            variant: "destructive",
            title: "Login Failed",
            description: "Could not log in with Google. Please try again.",
        });
        return null;
    }
  };

  const setRole = useCallback((role: 'customer' | 'artisan') => {
    setUser(currentUser => {
        if (currentUser) {
            const updatedUser = { ...currentUser, role };
            return updatedUser;
        }
        return null;
    });
  }, []);

  const isLoggedIn = !!user;

  const value = {
    isLoggedIn,
    user,
    login,
    logout,
    setRole,
    signInWithGoogle,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
}
